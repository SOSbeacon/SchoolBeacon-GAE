// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App.SOSBeacon.Model.Event = (function(_super) {
    __extends(Event, _super);

    function Event() {
      this.validate = __bind(this.validate, this);
      this.loadGroups = __bind(this.loadGroups, this);
      _ref = Event.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Event.prototype.idAttribute = 'key';

    Event.prototype.urlRoot = '/service/event';

    Event.prototype.defaults = function() {
      return {
        key: null,
        event_type: 'e',
        title: "",
        content: "",
        groups: [],
        modified: null,
        date: null,
        last_broadcast_date: null,
        student_count: 0,
        contact_count: 0,
        responded_count: 0,
        status: "",
        total_comment: 0,
        alert_id: 0,
        token: null
      };
    };

    Event.prototype.validators = {
      title: new App.Util.Validate.string({
        len: {
          min: 1,
          max: 100
        }
      }),
      content: new App.Util.Validate.string({
        len: {
          min: 1,
          max: 10000
        }
      })
    };

    Event.prototype.initialize = function() {
      this.groups = new App.SOSBeacon.Collection.GroupList();
      return this.loadGroups();
    };

    Event.prototype.loadGroups = function() {
      var groups, url;
      groups = this.get('groups');
      if (groups && !_.isEmpty(groups)) {
        url = this.groups.url + '/' + groups.join();
        return this.groups.fetch({
          url: url,
          async: false
        });
      }
    };

    Event.prototype.validate = function(attrs) {
      var errors, hasError;
      hasError = false;
      errors = {};
      if (_.isEmpty(attrs.title)) {
        hasError = true;
        errors.title = "Missing title.";
      }
      if (_.isEmpty(attrs.content)) {
        hasError = true;
        errors.content = "Content must be provided.";
      }
      if (_.isEmpty(attrs.groups)) {
        hasError = true;
        errors.groups = "Must be associated with at least one group.";
      }
      if (hasError) {
        return errors;
      }
    };

    return Event;

  })(Backbone.Model);

  App.SOSBeacon.Collection.EventList = (function(_super) {
    __extends(EventList, _super);

    function EventList() {
      _ref1 = EventList.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    EventList.prototype.model = App.SOSBeacon.Model.Event;

    EventList.prototype.paginator_core = {
      type: 'GET',
      dataType: 'json',
      url: '/service/event'
    };

    EventList.prototype.paginator_ui = {
      firstPage: 0,
      currentPage: 0,
      perPage: 100,
      totalPages: 100
    };

    EventList.prototype.query_defaults = {
      orderBy: 'last_broadcast_date',
      orderDirection: 'desc'
    };

    EventList.prototype.server_api = {};

    return EventList;

  })(Backbone.Paginator.requestPager);

  App.SOSBeacon.View.EventCenterAppView = (function(_super) {
    __extends(EventCenterAppView, _super);

    function EventCenterAppView() {
      this.onClose = __bind(this.onClose, this);
      this.robocallToDirect = __bind(this.robocallToDirect, this);
      this.robocallToStudent = __bind(this.robocallToStudent, this);
      this.triggerTab = __bind(this.triggerTab, this);
      this.editEvent = __bind(this.editEvent, this);
      this.addCall = __bind(this.addCall, this);
      this.addEmergency = __bind(this.addEmergency, this);
      this.addEmail = __bind(this.addEmail, this);
      this.addBroadcast = __bind(this.addBroadcast, this);
      this.addComment = __bind(this.addComment, this);
      this.messageAdd = __bind(this.messageAdd, this);
      this.downloadEvent = __bind(this.downloadEvent, this);
      this.sortGroup = __bind(this.sortGroup, this);
      this.editGroup = __bind(this.editGroup, this);
      this.renderGroups = __bind(this.renderGroups, this);
      this.renderMessages = __bind(this.renderMessages, this);
      this.renderTotalComment = __bind(this.renderTotalComment, this);
      this.render = __bind(this.render, this);
      this.refeshData = __bind(this.refeshData, this);
      this.initialize = __bind(this.initialize, this);
      _ref2 = EventCenterAppView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    EventCenterAppView.prototype.template = JST['event-center/detail'];

    EventCenterAppView.prototype.id = "sosbeaconapp";

    EventCenterAppView.prototype.className = "top_view row-fluid event-center-details";

    EventCenterAppView.prototype.interval = 0;

    EventCenterAppView.prototype.events = {
      "click .event-add-comment": "addComment",
      "click .event-add-broadcast": "addBroadcast",
      "click .event-add-emergency": "addEmergency",
      "click .event-add-call": "addCall",
      "click .event-add-email": "addEmail",
      "click #edit-event-button": "editEvent",
      "click #details-tabs a": "triggerTab",
      "click #no-students #robocall": "robocallToStudent",
      "click #no-directs #robocall": "robocallToDirect",
      "click #email-download-button": "downloadEvent",
      "click .editGroup": "editGroup"
    };

    EventCenterAppView.prototype.initialize = function(id) {
      var interval, _i,
        _this = this;
      this.groupViews = [];
      this.messageView = null;
      this.broadcastView = null;
      this.respondedView = null;
      this.nonRespondedView = null;
      this.noStudentsView = null;
      this.noDirectsView = null;
      this.studentMarkerList = new App.SOSBeacon.Collection.StudentMarkerList();
      this.directMarkerList = new App.SOSBeacon.Collection.DirectMarkerList();
      this.collection = new App.SOSBeacon.Collection.MessageList();
      this.model = new App.SOSBeacon.Model.Event({
        key: id
      });
      this.model.fetch({
        async: false
      });
      this.model.initialize();
      this.token = this.model.get("token");
      App.SOSBeacon.Event.bind("message:add", this.messageAdd, this);
      for (interval = _i = 0; _i < 1000; interval = ++_i) {
        clearInterval(interval);
        interval++;
      }
      return interval = setInterval((function() {
        _this.renderTotalComment();
        return _this.collection.fetch({
          async: false
        });
      }), 5000);
    };

    EventCenterAppView.prototype.refeshData = function() {
      var _this = this;
      return setInterval((function() {
        return _this.renderTotalComment();
      }), 30000);
    };

    EventCenterAppView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.renderGroups();
      this.renderMessages();
      $('#details-tabs a[href="#details"]').tab('show');
      App.Skel.Event.trigger('refesh_comment');
      return this;
    };

    EventCenterAppView.prototype.renderTotalComment = function() {
      var total_comment;
      this.model.fetch({
        async: false
      });
      total_comment = this.model.get('total_comment');
      return $('.total_comment').text(total_comment + " comments");
    };

    EventCenterAppView.prototype.renderMessages = function() {
      var _this = this;
      _.extend(this.collection.server_api, {
        'feq_event': this.model.id,
        'orderBy': 'timestamp',
        'orderDirection': 'desc'
      });
      this.$("#view-message-area").empty();
      this.$("#event-center-message").append('<img src="/static/img/spinner_squares_circle.gif" style="display: block; margin-left: 45%" class="image">');
      this.collection.fetch({
        success: function(data) {
          return _this.$('.image').remove();
        },
        error: function() {
          return window.location = '/school';
        }
      });
      this.messageListView = new App.SOSBeacon.View.MessageList({
        collection: this.collection
      });
      return this.$("#view-message-area").html(this.messageListView.render().el);
    };

    EventCenterAppView.prototype.renderGroups = function() {
      var $newdiv1, groupEl, groupKey, groupName, i, _results,
        _this = this;
      groupName = [];
      groupKey = [];
      groupEl = this.$('.event-groups');
      _.each(this.model.groups.models, function(group) {
        groupName.push(group.get('name'));
        return groupKey.push(group.get('key'));
      });
      groupName = this.sortGroup(groupName);
      i = 0;
      _results = [];
      while (i < groupName.length) {
        $newdiv1 = $("<a class='editGroup'>" + groupName[i] + "</a>").attr('id', groupKey[i]);
        groupEl.append($newdiv1).append("<br />");
        _results.push(i++);
      }
      return _results;
    };

    EventCenterAppView.prototype.editGroup = function(e) {
      var el;
      this.groupKey = $(e.target).attr('id');
      this.groupEdit = new App.SOSBeacon.View.GroupStudentsEdit(this.groupKey);
      el = this.groupEdit.render(true).$el;
      return el.modal('show');
    };

    EventCenterAppView.prototype.sortGroup = function(group_links) {
      var group_defaults, i, _i, _len;
      group_links.sort();
      group_defaults = [];
      for (i in group_links) {
        if (group_links[i] === "Admin") {
          group_links.splice(i, 1);
          group_defaults.push("Admin");
        }
        if (group_links[i] === "Staff") {
          group_links.splice(i, 1);
          group_defaults.push("Staff");
        }
      }
      group_defaults = group_defaults.sort().reverse();
      if (group_defaults.length > 0) {
        for (_i = 0, _len = group_defaults.length; _i < _len; _i++) {
          i = group_defaults[_i];
          group_links.unshift(i);
        }
        return group_links;
      }
      return group_links;
    };

    EventCenterAppView.prototype.downloadEvent = function() {
      var el;
      this.downloadEmail = new App.SOSBeacon.View.EventDownloadEmail(this.model);
      el = this.downloadEmail.render(true).$el;
      return el.modal('show');
    };

    EventCenterAppView.prototype.messageAdd = function(message) {
      return this.collection.add(message, {
        at: 0
      });
    };

    EventCenterAppView.prototype.addComment = function() {
      if (this.broadcastView) {
        this.broadcastView.hide();
      }
      if (this.messageView) {
        this.messageView.close();
      }
      this.messageView = new App.SOSBeacon.View.EditMessage({
        event: this.model
      });
      return this.$(".message-entry").append(this.messageView.render().el);
    };

    EventCenterAppView.prototype.addBroadcast = function() {
      if (this.messageView) {
        this.messageView.hide();
      }
      if (this.broadcastView) {
        this.broadcastView.close();
      }
      this.broadcastView = new App.SOSBeacon.View.AddBroadcast({
        event: this.model
      });
      return this.$(".message-entry").append(this.broadcastView.render().el);
    };

    EventCenterAppView.prototype.addEmail = function() {
      if (this.messageView) {
        this.messageView.hide();
      }
      if (this.broadcastView) {
        this.broadcastView.close();
      }
      this.broadcastView = new App.SOSBeacon.View.AddEmail({
        event: this.model
      });
      return this.$(".message-entry").append(this.broadcastView.render().el);
    };

    EventCenterAppView.prototype.addEmergency = function() {
      if (this.messageView) {
        this.messageView.hide();
      }
      if (this.broadcastView) {
        this.broadcastView.close();
      }
      this.broadcastView = new App.SOSBeacon.View.AddEmergency({
        event: this.model
      });
      return this.$(".message-entry").append(this.broadcastView.render().el);
    };

    EventCenterAppView.prototype.addCall = function() {
      if (this.messageView) {
        this.messageView.hide();
      }
      if (this.broadcastView) {
        this.broadcastView.close();
      }
      this.broadcastView = new App.SOSBeacon.View.AddCall({
        event: this.model
      });
      return this.$(".message-entry").append(this.broadcastView.render().el);
    };

    EventCenterAppView.prototype.editEvent = function() {
      return App.SOSBeacon.router.navigate("/eventcenter/edit/" + this.model.id, {
        trigger: true
      });
    };

    EventCenterAppView.prototype.triggerTab = function(e) {
      var el, href;
      el = $(e.target);
      href = el.attr('href');
      if (href === "#responded") {
        if (this.respondedView) {
          this.$("#responded").empty();
        }
        this.model.fetch({
          async: false
        });
        this.model.initialize();
        this.respondedView = new App.SOSBeacon.View.MarkerList(new App.SOSBeacon.Collection.ContactMarkerList, this.model.id, true);
        this.$("#responded").append(this.respondedView.render().el);
      } else if (href === "#no-students") {
        if (this.noStudentsView) {
          this.$("#no-students").empty();
        }
        this.model.fetch({
          async: false
        });
        this.model.initialize();
        this.noStudentsView = new App.SOSBeacon.View.MarkerListStudent(this.studentMarkerList, this.model.id, this.model.get('message_type'), false);
        this.$("#no-students").append(this.noStudentsView.render().el);
      } else if (href === "#no-directs") {
        if (this.noDirectsView) {
          this.$("#no-directs").empty();
        }
        this.model.fetch({
          async: false
        });
        this.model.initialize();
        this.noDirectsView = new App.SOSBeacon.View.MarkerListDirect(this.directMarkerList, this.model.id, this.model.get('message_type'), false);
        this.$("#no-directs").append(this.noDirectsView.render().el);
      }
      return el.tab('show');
    };

    EventCenterAppView.prototype.robocallToStudent = function() {
      if (!confirm("Do you really want to robocall non-responders now?")) {
        return;
      }
      $.ajax('/service/event/' + this.model.id + '/robocall/student', {
        'type': 'POST'
      });
      $("#robocall").hide();
      return false;
    };

    EventCenterAppView.prototype.robocallToDirect = function() {
      if (!confirm("Do you really want to robocall non-responders now?")) {
        return;
      }
      $.ajax('/service/event/' + this.model.id + '/robocall/direct', {
        'type': 'POST'
      });
      $("#robocall").hide();
      return false;
    };

    EventCenterAppView.prototype.onClose = function() {
      var view, _i, _j, _len, _len1, _ref3, _ref4;
      App.SOSBeacon.Event.unbind(null, null, this);
      _ref3 = [this.messageView, this.broadcastView, this.respondedView, this.nonRespondedView, this.noStudentsView, this.noDirectsView];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        view = _ref3[_i];
        if (view) {
          view.close();
        }
      }
      _ref4 = this.groupViews;
      for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
        view = _ref4[_j];
        view.close();
      }
      return this.messageListView.close();
    };

    return EventCenterAppView;

  })(Backbone.View);

  App.SOSBeacon.View.EventDownloadEmail = (function(_super) {
    __extends(EventDownloadEmail, _super);

    function EventDownloadEmail() {
      this.downloadEmail = __bind(this.downloadEmail, this);
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);
      _ref3 = EventDownloadEmail.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    EventDownloadEmail.prototype.id = "downloademail";

    EventDownloadEmail.prototype.tagName = 'div';

    EventDownloadEmail.prototype.template = JST['event-center/download-email'];

    EventDownloadEmail.prototype.events = {
      "click #send-email-select #email-download-button": "downloadEmail"
    };

    EventDownloadEmail.prototype.initialize = function(model) {
      return this.model = model;
    };

    EventDownloadEmail.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    EventDownloadEmail.prototype.downloadEmail = function() {
      var downloadOptions, selectCount;
      downloadOptions = $(".de-option");
      selectCount = "";
      $.each(downloadOptions, function() {
        if ($(this).is(":checked")) {
          return selectCount = selectCount + $(this).val();
        }
      });
      if (selectCount.length > 0) {
        if (confirm("Are you sure you want to upload the website data to your email?")) {
          $(".message-info").html("<h4 style='color: blue'>Sending email, please wait and don't reload your browser. ...</h4>");
          $.ajax({
            url: '/service/event/' + this.model.id + '/' + selectCount + '/download',
            type: "GET",
            async: false,
            success: function(data) {
              selectCount = "";
              $('.message-info').hide();
              return App.Util.Form.showAlert("Successs!", "Sent successfully to your email.", "alert-success");
            }
          });
        } else {
          false;
        }
      } else {
        alert("Please select your download options.");
        false;
      }
      return false;
    };

    return EventDownloadEmail;

  })(Backbone.View);

  App.SOSBeacon.View.EventGroup = (function(_super) {
    __extends(EventGroup, _super);

    function EventGroup() {
      this.editGroup = __bind(this.editGroup, this);
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);
      _ref4 = EventGroup.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    EventGroup.prototype.tagName = 'a';

    EventGroup.prototype.className = 'editGroup';

    EventGroup.prototype.events = {
      "click": "editGroup"
    };

    EventGroup.prototype.initialize = function(model) {
      return this.model = model;
    };

    EventGroup.prototype.render = function() {
      this.$el.html("" + (this.model.get('name')) + " <br />");
      return this;
    };

    EventGroup.prototype.editGroup = function() {
      var el;
      this.groupEdit = new App.SOSBeacon.View.GroupStudentsEdit(this.model.id);
      el = this.groupEdit.render(true).$el;
      return el.modal('show');
    };

    return EventGroup;

  })(Backbone.View);

  App.SOSBeacon.View.EventCenterEditApp = (function(_super) {
    __extends(EventCenterEditApp, _super);

    function EventCenterEditApp() {
      this.onClose = __bind(this.onClose, this);
      this.view = __bind(this.view, this);
      this.renderHeader = __bind(this.renderHeader, this);
      this.render = __bind(this.render, this);
      this.modelSaved = __bind(this.modelSaved, this);
      this.initialize = __bind(this.initialize, this);
      _ref5 = EventCenterEditApp.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    EventCenterEditApp.prototype.template = JST['event-center/itemheader'];

    EventCenterEditApp.prototype.id = "sosbeaconapp";

    EventCenterEditApp.prototype.className = "top_view container";

    EventCenterEditApp.prototype.isNew = true;

    EventCenterEditApp.prototype.events = {
      "click .view-button": "view"
    };

    EventCenterEditApp.prototype.initialize = function(id) {
      if (!id) {
        this.model = new App.SOSBeacon.Model.Event();
        this.isNew = true;
      } else {
        this.model = new App.SOSBeacon.Model.Event({
          key: id
        });
        this.model.fetch({
          async: false
        });
        this.model.initialize();
        this.isNew = false;
      }
      this.editForm = new App.SOSBeacon.View.EventCenterEditForm(this.model);
      return App.SOSBeacon.Event.bind("model:save", this.modelSaved, this);
    };

    EventCenterEditApp.prototype.modelSaved = function(model) {
      return App.SOSBeacon.router.navigate("/eventcenter/view/" + model.id, {
        trigger: true
      });
    };

    EventCenterEditApp.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.$el.append(this.editForm.render().el);
      this.renderHeader();
      try {
        this.$("#content").wysihtml5({
          "uploadUrl": "/uploads/new"
        });
      } catch (_error) {}
      return this;
    };

    EventCenterEditApp.prototype.renderHeader = function() {
      var header;
      header = this.$("#editheader");
      if (this.addMode) {
        return header.html("Add New " + (header.text()));
      } else {
        return header.html("Edit " + (header.text()));
      }
    };

    EventCenterEditApp.prototype.view = function() {
      return App.SOSBeacon.router.navigate("/eventcenter", {
        trigger: true
      });
    };

    EventCenterEditApp.prototype.onClose = function() {
      App.SOSBeacon.Event.unbind(null, null, this);
      return this.editForm.close();
    };

    return EventCenterEditApp;

  })(Backbone.View);

  App.SOSBeacon.View.EventCenterEditForm = (function(_super) {
    __extends(EventCenterEditForm, _super);

    function EventCenterEditForm() {
      this.onClose = __bind(this.onClose, this);
      this.updateOnEnter = __bind(this.updateOnEnter, this);
      this.save = __bind(this.save, this);
      this.change = __bind(this.change, this);
      this.renderGroups = __bind(this.renderGroups, this);
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);
      _ref6 = EventCenterEditForm.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    EventCenterEditForm.prototype.template = JST['event-center/edit'];

    EventCenterEditForm.prototype.className = "row-fluid";

    EventCenterEditForm.prototype.propertyMap = {
      title: "input.title",
      groups: "select.groups",
      content: "textarea.content"
    };

    EventCenterEditForm.prototype.events = {
      "change": "change",
      "submit form": "save",
      "keypress .edit": "updateOnEnter"
    };

    EventCenterEditForm.prototype.initialize = function(model) {
      this.model = model;
      this.validator = new App.Util.FormValidator(this, {
        propertyMap: this.propertyMap,
        validatorMap: this.model.validators
      });
      delete this.events['blur textarea.content'];
      return this.model.bind('error', App.Util.Form.displayValidationErrors);
    };

    EventCenterEditForm.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.renderGroups();
      this.$("#title").focus();
      return this;
    };

    EventCenterEditForm.prototype.renderGroups = function() {
      var allGroups,
        _this = this;
      allGroups = new App.SOSBeacon.Collection.GroupList();
      allGroups.fetch({
        async: false,
        error: function() {
          return window.location = '/school';
        }
      });
      allGroups.each(function(group, i) {
        return _this.$("#group-select").append($("<option></option>").attr('value', group.get('key')).html(group.get('name')));
      });
      this.$("#group-select").val(this.model.get('groups')).select2({
        placeholder: "Select a group...",
        openOnEnter: false
      });
      return this.$("input.select2-input").css('width', '100%');
    };

    EventCenterEditForm.prototype.change = function(event) {
      return App.Util.Form.hideAlert();
    };

    EventCenterEditForm.prototype.save = function(e) {
      var groupIds,
        _this = this;
      if (e) {
        e.preventDefault();
      }
      groupIds = this.$("#group-select").val();
      if (!groupIds) {
        groupIds = [];
      }
      this.model.save({
        title: this.$('input.title').val(),
        groups: groupIds,
        content: $.trim(this.$('textarea.content').val())
      }, {
        success: function(model) {
          App.Util.Form.hideAlert();
          App.Util.Form.showAlert("Successs!", "Save successful", "alert-success");
          App.Util.TrackChanges.clear(_this);
          return App.SOSBeacon.Event.trigger('model:save', _this.model, _this);
        }
      });
      return false;
    };

    EventCenterEditForm.prototype.updateOnEnter = function(e) {
      var focusItem;
      focusItem = $("*:focus");
      if (e.keyCode === 13 && focusItem.attr('id') !== 'content') {
        this.save();
        return false;
      }
    };

    EventCenterEditForm.prototype.onClose = function() {
      return App.Util.TrackChanges.stop(this);
    };

    return EventCenterEditForm;

  })(Backbone.View);

  App.SOSBeacon.View.EventCenterApp = (function(_super) {
    __extends(EventCenterApp, _super);

    function EventCenterApp() {
      this.add = __bind(this.add, this);
      this.timezone = __bind(this.timezone, this);
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);
      _ref7 = EventCenterApp.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    EventCenterApp.prototype.id = "sosbeaconapp";

    EventCenterApp.prototype.template = JST['event-center/view'];

    EventCenterApp.prototype.events = {
      "click .add-button": "add",
      "change #selectTimeZone": "timezone"
    };

    EventCenterApp.prototype.initialize = function() {
      var interval, _i, _results;
      this.collection = new App.SOSBeacon.Collection.EventList();
      this.listView = new App.SOSBeacon.View.EventCenterList(this.collection);
      _.extend(this.collection.server_api, {
        'limit': 200,
        'orderBy': 'last_broadcast_date',
        'orderDirection': 'desc'
      });
      _results = [];
      for (interval = _i = 0; _i < 1000; interval = ++_i) {
        clearInterval(interval);
        _results.push(interval++);
      }
      return _results;
    };

    EventCenterApp.prototype.render = function() {
      var select;
      this.$el.html(this.template());
      this.$el.append(this.listView.render().el);
      select = this.$el.find("#selectTimeZone");
      select.val(default_timezone);
      $("#add_new").focus();
      return this;
    };

    EventCenterApp.prototype.timezone = function() {
      var default_timezone, select, url;
      select = this.$el.find("#selectTimeZone");
      default_timezone = select.val();
      url = '/service/timezone/' + default_timezone;
      default_timezone = this.sendAjax(url);
      location.reload();
      return false;
    };

    EventCenterApp.prototype.sendAjax = function(url) {
      var result;
      result = null;
      $.ajax({
        url: url,
        type: "GET",
        async: false,
        success: function(data) {
          return result = data;
        }
      });
      return result;
    };

    EventCenterApp.prototype.add = function() {
      return App.SOSBeacon.router.navigate("/eventcenter/new", {
        trigger: true
      });
    };

    return EventCenterApp;

  })(Backbone.View);

  App.SOSBeacon.View.EventCenterListItem = (function(_super) {
    __extends(EventCenterListItem, _super);

    function EventCenterListItem() {
      this.view = __bind(this.view, this);
      this.edit = __bind(this.edit, this);
      this.actionSelect = __bind(this.actionSelect, this);
      this.editStatus = __bind(this.editStatus, this);
      this.changeSelect = __bind(this.changeSelect, this);
      this.render = __bind(this.render, this);
      _ref8 = EventCenterListItem.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    EventCenterListItem.prototype.template = JST['event-center/list'];

    EventCenterListItem.prototype.events = {
      "click .view-button": "view",
      "click .remove-button": "delete",
      "click .aStt": "changeSelect",
      "change .slStt": "editStatus",
      "blur .slStt": 'actionSelect'
    };

    EventCenterListItem.prototype.render = function() {
      var a_status, group_links, model_props, no_responder, sl_status,
        _this = this;
      model_props = this.model.toJSON();
      group_links = [];
      _.each(this.model.groups.models, function(acs) {
        return group_links.push(" " + (acs.get('name')));
      });
      model_props['group_list'] = group_links;
      no_responder = this.model.get('contact_count') - this.model.get('responded_count') + 1;
      if (no_responder < 0) {
        model_props['no_responder'] = 0;
      } else {
        model_props['no_responder'] = no_responder;
      }
      a_status = "aStatus" + this.model.get('id').toString();
      sl_status = "slStatus" + this.model.get('id').toString();
      model_props['a_status'] = a_status;
      model_props['sl_status'] = sl_status;
      this.$el.html(this.template(model_props));
      return this;
    };

    EventCenterListItem.prototype.changeSelect = function() {
      var id;
      if (this.model.get('status') === 'dr') {
        return false;
      }
      id = this.model.get('id').toString();
      $('#aStatus' + id).hide();
      $('#slStatus' + id).show();
      return $('#slStatus' + id).val($('#aStatus' + id).attr('data'));
    };

    EventCenterListItem.prototype.editStatus = function() {
      var id, status;
      id = this.model.get('id').toString();
      status = document.getElementById('slStatus' + id).value;
      if (status === 'Open') {
        this.model.set({
          "status": "se"
        });
      }
      if (status === 'Closed') {
        this.model.set({
          "status": "cl"
        });
      }
      $('#slStatus' + id).val(status);
      return $.ajax({
        type: 'PUT',
        dataType: 'json',
        url: '/service/event/' + this.model.get('key'),
        data: JSON.stringify(this.model)
      });
    };

    EventCenterListItem.prototype.actionSelect = function() {
      var id;
      id = this.model.get('id').toString();
      $("#aStatus" + id).show(function() {
        return $("#aStatus" + id).html($("#slStatus" + id).val());
      });
      return $('#slStatus' + id).hide();
    };

    EventCenterListItem.prototype.edit = function() {
      return App.SOSBeacon.router.navigate("/eventcenter/edit/" + this.model.id, {
        trigger: true
      });
    };

    EventCenterListItem.prototype.view = function() {
      $.ajax('/service/event/' + this.model.id + '/visits', {
        'type': 'POST'
      });
      return App.SOSBeacon.router.navigate("/eventcenter/view/" + this.model.id, {
        trigger: true
      });
    };

    return EventCenterListItem;

  })(App.Skel.View.ListItemView);

  App.SOSBeacon.View.EventCenterListHeader = (function(_super) {
    __extends(EventCenterListHeader, _super);

    function EventCenterListHeader() {
      _ref9 = EventCenterListHeader.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    EventCenterListHeader.prototype.template = JST['event-center/listheader'];

    return EventCenterListHeader;

  })(App.Skel.View.ListItemHeader);

  App.SOSBeacon.View.EventCenterList = (function(_super) {
    __extends(EventCenterList, _super);

    function EventCenterList() {
      this.initialize = __bind(this.initialize, this);
      _ref10 = EventCenterList.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    EventCenterList.prototype.itemView = App.SOSBeacon.View.EventCenterListItem;

    EventCenterList.prototype.headerView = App.SOSBeacon.View.EventCenterListHeader;

    EventCenterList.prototype.gridFilters = null;

    EventCenterList.prototype.initialize = function(collection) {
      this.gridFilters = new App.Ui.Datagrid.FilterList();
      this.gridFilters.add(new App.Ui.Datagrid.FilterItem({
        name: 'Title',
        type: 'text',
        prop: 'flike_title',
        'default': false,
        control: App.Ui.Datagrid.InputFilter
      }));
      this.gridFilters.add(new App.Ui.Datagrid.FilterItem({
        name: 'Group',
        type: 'text',
        prop: 'feq_groups',
        'default': false,
        control: App.SOSBeacon.View.GroupTypeahaedFilter
      }));
      return EventCenterList.__super__.initialize.call(this, collection);
    };

    return EventCenterList;

  })(App.Skel.View.ListView);

}).call(this);
